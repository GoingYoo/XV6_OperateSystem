diff --git a/Makefile b/Makefile
index 8e4f945..07fb897 100644
--- a/Makefile
+++ b/Makefile
@@ -147,6 +147,7 @@ UPROGS=\
 	$U/_primes\
 	$U/_tracetest\
 	$U/_yieldtest\
+	$U/_uthread\
 
 ph: notxv6/ph.c
 	gcc -o ph -g -O2 $(XCFLAGS) notxv6/ph.c -pthread
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 4305d49..1d63596 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -172,7 +172,7 @@ syscall(void)
     //位操作判断mask是否覆盖了当前调用号，即检查是否需要跟踪该系统调用
     if (p->trace_mask & (1 << num))
       printf("%d: syscall %s -> %d\n", 
-            p->pid, syscallnames[num-1], p->trapframe->a0);
+            p->pid, syscallnames[num], p->trapframe->a0);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index e8ed2db..1907c4f 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,6 +30,19 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  bstate.nthread++;
+  if (bstate.nthread == nthread) {
+    bstate.round++;
+    bstate.nthread = 0;  // 重置线程计数为下一轮
+    pthread_cond_broadcast(&bstate.barrier_cond);  // 唤醒所有等待的线程
+  } else {
+    int local_round = bstate.round;  // 记录当前的round值
+    while (local_round == bstate.round) {
+      pthread_cond_wait(&bstate.barrier_cond, &bstate.barrier_mutex);
+    }
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
   
 }
 
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 27a9cd1..152d9d6 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -16,6 +16,8 @@ struct entry {
 struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
+pthread_mutex_t locks[NBUCKET];
+
 
 
 double
@@ -40,6 +42,7 @@ static
 void put(int key, int value)
 {
   int i = key % NBUCKET;
+  pthread_mutex_lock(&locks[i]);
 
   // is the key already present?
   struct entry *e = 0;
@@ -54,19 +57,21 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
-
+  pthread_mutex_unlock(&locks[i]);
+  
 }
 
 static struct entry*
 get(int key)
 {
   int i = key % NBUCKET;
-
+  pthread_mutex_lock(&locks[i]);
 
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
     if (e->key == key) break;
   }
+  pthread_mutex_unlock(&locks[i]);
 
   return e;
 }
@@ -118,6 +123,10 @@ main(int argc, char *argv[])
     keys[i] = random();
   }
 
+  //init mutex lock
+  for(int i = 0; i < NBUCKET; i++)
+    pthread_mutex_init(&locks[i],NULL);
+
   //
   // first the puts
   //
@@ -145,6 +154,10 @@ main(int argc, char *argv[])
   }
   t1 = now();
 
+  for (int i = 0; i < NBUCKET; i++) {
+    pthread_mutex_destroy(&locks[i]);
+  }
+
   printf("%d gets, %.3f seconds, %.0f gets/second\n",
          NKEYS*nthread, t1 - t0, (NKEYS*nthread) / (t1 - t0));
 }
diff --git a/user/uthread.c b/user/uthread.c
index a6e3800..ff04293 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,10 +10,30 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+// Saved registers for thread context switches.
+struct thread_context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct thread_context context; /* context of thread */
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -60,6 +80,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch((uint64)&t->context, (uint64)&next_thread->context);
   } else
     next_thread = 0;
 }
@@ -74,6 +95,9 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->context.ra = (uint64)func;
+  t->context.sp = (uint64)&t->stack[STACK_SIZE - 1];
+  t->context.s0 = (uint64)&t->stack[STACK_SIZE - 1];
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 44e1cec..3821fe4 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -8,4 +8,33 @@
 	.globl thread_switch
 thread_switch:
 	/* YOUR CODE HERE */
+	sd ra, 0(a0)
+    sd sp, 8(a0)
+    sd s0, 16(a0)
+    sd s1, 24(a0)
+    sd s2, 32(a0)
+    sd s3, 40(a0)
+    sd s4, 48(a0)
+    sd s5, 56(a0)
+    sd s6, 64(a0)
+    sd s7, 72(a0)
+    sd s8, 80(a0)
+    sd s9, 88(a0)
+    sd s10, 96(a0)
+    sd s11, 104(a0)
+
+    ld ra, 0(a1)
+    ld sp, 8(a1)
+    ld s0, 16(a1)
+    ld s1, 24(a1)
+    ld s2, 32(a1)
+    ld s3, 40(a1)
+    ld s4, 48(a1)
+    ld s5, 56(a1)
+    ld s6, 64(a1)
+    ld s7, 72(a1)
+    ld s8, 80(a1)
+    ld s9, 88(a1)
+    ld s10, 96(a1)
+    ld s11, 104(a1)
 	ret    /* return to ra */
