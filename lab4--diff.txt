diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..487f4f2 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..375195b 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -127,6 +127,8 @@ exec(char *path, char **argv)
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
+  if(p->pid==1) 
+    vmprint(p->pagetable);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 25c87ea..0a88102 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -65,4 +65,4 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
-#define USYSCALL 0 //MODIFY HERE for LAB 4
+#define USYSCALL (TRAPFRAME - PGSIZE) //MODIFY HERE for LAB 4
diff --git a/kernel/proc.c b/kernel/proc.c
index d3520f9..6b18e79 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -132,6 +132,14 @@ found:
     return 0;
   }
 
+  // Allocate a usyscall page.
+  if((p->usyscall = (struct usyscall *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  p->usyscall->pid=p->pid;
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -155,6 +163,9 @@ found:
 static void
 freeproc(struct proc *p)
 {
+  if(p->usyscall)
+    kfree((void*)p->usyscall);
+  p->usyscall = 0;
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
@@ -202,6 +213,15 @@ proc_pagetable(struct proc *p)
     return 0;
   }
 
+  //map the usyscall page just below the trapframe page
+  if(mappages(pagetable, USYSCALL, PGSIZE,
+              (uint64)(p->usyscall), PTE_R | PTE_U) < 0){
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
   return pagetable;
 }
 
@@ -212,6 +232,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index c130130..26f6fb8 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -106,6 +106,7 @@ struct proc {
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
   struct trapframe *trapframe; // data page for trampoline.S
+  struct usyscall *usyscall;    // data page for usyscall 
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..dd86be5 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -437,3 +437,38 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+void vmprint_level(pagetable_t pagetable, int level, uint64 base_va) {
+  for (int i = 0; i < 512; i++) {
+    pte_t pte = pagetable[i];
+    if (pte & PTE_V) { // 检查有效位
+      uint64 pa = PTE2PA(pte);  // 获取子页表或物理页地址
+      uint64 va = base_va | ((uint64)i << (PGSHIFT + 9 * (2 - level))); // 正确计算虚拟地址
+      
+      // 打印树的深度
+      for(int j = 0; j < level; j++) {
+        printf("||  ");
+      }
+
+      char flags[5]; // 创建一个字符数组来存储权限标志
+      flags[0] = (pte & PTE_R) ? 'r' : '-';
+      flags[1] = (pte & PTE_W) ? 'w' : '-';
+      flags[2] = (pte & PTE_X) ? 'x' : '-';
+      flags[3] = (pte & PTE_U) ? 'u' : '-';
+      flags[4] = '\0'; // 确保字符串正确终结
+
+      if((pte & (PTE_R|PTE_W|PTE_X))) { // 叶子节点
+        printf("||idx: %d: va: %p -> pa: %p, flags: %s\n",
+            i, va, pa, flags);
+      } else { // 非叶子节点
+        printf("||idx: %d: pa: %p, flags: ----\n", i, pa);
+        vmprint_level((pagetable_t)pa, level + 1, va); // 递归打印下一级页表
+      }
+    }
+  }
+}
+
+void vmprint(pagetable_t pagetable) {
+  printf("page table %p\n", pagetable);
+  vmprint_level(pagetable, 0, 0);
+}
\ No newline at end of file
